@using Microsoft.AspNetCore.Identity
@using ItTakesAVillage.Models
@using ItTakesAVillage.Contracts

@inject SignInManager<ItTakesAVillageUser> SignInManager
@inject UserManager<ItTakesAVillageUser> UserManager
@inject INotificationService notificationService
@{
    var user = await UserManager.GetUserAsync(User);
}

<ul class="navbar-nav">
    @if (user != null)
    {
        int unreadNotifications = await notificationService.Count(user.Id);

        <li class="nav-item">
            <a class="nav-link text-dark" asp-page="/Notification">
                <i class="bi bi-bell"></i>
                @if (unreadNotifications > 0)
                {
                    <span class="badge bg-danger">@unreadNotifications</span>
                }
            </a>
        </li>
        <li class="nav-item">
            <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
        </li>
        <li class="nav-item">
            <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
                <button id="logout" type="submit" class="nav-link btn btn-link text-dark border-0">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
